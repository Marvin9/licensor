package utils

// LicensorYAML is specific filename which would be searched to get license
const LicensorYAML = "licensor.yml"

// UniqueIdentifier is header in comment
const UniqueIdentifier = "License generated by licensor(https://github.com/Marvin9/licensor)."

// flags
const (
	// PROJECT: -project [projectDir]
	PROJECT = "-project"
	// EXT: -ext [extensions...] :For example -ext go cpp js
	EXT = "-ext"
	// LICENSE: -license [license file path/url] :For example -license "./templateLicense.txt"
	LICENSE = "-license"
	// IGNORE: -ignore [files...]
	IGNORE = "-ignore"
	// TEMPLATE: -template [json string] :For example -template "{\"name\":\"mayur\"}"
	TEMPLATE = "-template"
	// REMOVE: -remove
	REMOVE = "-remove"
	// HELP: -help
	HELP = "-help"
)

// HelpDocs docs of flags
const HelpDocs = `
usage: licensor [-project <project directory>] (optional) (default: "./")
		[-ext <file extension which you want to add header>...] (required at least one extension)
		[-license <path or url of license template you want to inject>] (required)
		[-template <json string of variables for license template>] (required only if it is in license template)
		[-ignore <relative path of file(s)/dir(s) to ignore>] (optional)
		[-remove] (optional)

example:
1. licensor -project ./\
		-ext go py c cpp\ 
		-license ./Apache-2.txt\ 
		-template '{\"owner\": \"foo\",\"year\":\"bar\"}'
		-ignore ./foo ./bar/foo.go

2. licensor -ext go -license ./Static.txt
3. licensor -remove -ext go py [Remove license header from go and python files]
4. licensor [this will follow licensor.yml file]
`

// Commands - valid commands
var Commands = []string{
	PROJECT, EXT, LICENSE, IGNORE, TEMPLATE, REMOVE,
}

// SupportedFileExtensions - files which we can inject comment (From our side)
// Each may have different multiline comment syntax
var SupportedFileExtensions = []string{
	"go", "c", "cpp", "js", "css",
}

// IgnoreDirs - directories that will be ignored by default
var IgnoreDirs = []string{
	"node_modules", ".git",
}

// ShouldIgnoreDir - whether dir should be ignored by default
func ShouldIgnoreDir(dir string) bool {
	return Exists(dir, IgnoreDirs)
}
